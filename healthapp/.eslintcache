[{"C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\HealthApplication\\healthapp\\src\\index.js":"1","C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\HealthApplication\\healthapp\\src\\reportWebVitals.js":"2","C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\HealthApplication\\healthapp\\src\\App.js":"3","C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\HealthApplication\\healthapp\\src\\components\\login.js":"4","C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\HealthApplication\\healthapp\\src\\components\\Homepage.js":"5","C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\HealthApplication\\healthapp\\src\\components\\Signup.js":"6","C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\HealthApplication\\healthapp\\src\\components\\EditAccount.js":"7","C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\HealthApplication\\healthapp\\src\\pagecomponent\\footer.js":"8","C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\HealthApplication\\healthapp\\src\\pagecomponent\\nav.js":"9","C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\HealthApplication\\healthapp\\src\\components\\Homepagecomponents\\Maingraph.js":"10","C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\HealthApplication\\healthapp\\src\\components\\Homepagecomponents\\goalcard.js":"11","C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\HealthApplication\\healthapp\\src\\components\\Homepagecomponents\\Currenthealthcard.js":"12","C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\HealthApplication\\healthapp\\src\\components\\HealthUpdates\\posthealthupdates.js":"13","C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\HealthApplication\\healthapp\\src\\components\\Updates.js":"14","C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\HealthApplication\\healthapp\\src\\components\\Goals.js":"15","C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\HealthApplication\\healthapp\\src\\components\\Goals\\Setgoal.js":"16"},{"size":500,"mtime":499162500000,"results":"17","hashOfConfig":"18"},{"size":362,"mtime":499162500000,"results":"19","hashOfConfig":"18"},{"size":1631,"mtime":1611585198957,"results":"20","hashOfConfig":"18"},{"size":4148,"mtime":1611632949882,"results":"21","hashOfConfig":"18"},{"size":1954,"mtime":1611588365428,"results":"22","hashOfConfig":"18"},{"size":4276,"mtime":1611632477615,"results":"23","hashOfConfig":"18"},{"size":3600,"mtime":1611632924495,"results":"24","hashOfConfig":"18"},{"size":1595,"mtime":1611555718654,"results":"25","hashOfConfig":"18"},{"size":3602,"mtime":1611555607517,"results":"26","hashOfConfig":"18"},{"size":3165,"mtime":1611632886663,"results":"27","hashOfConfig":"18"},{"size":2396,"mtime":1611632933052,"results":"28","hashOfConfig":"18"},{"size":2166,"mtime":1611632854227,"results":"29","hashOfConfig":"18"},{"size":3894,"mtime":1611583981658,"results":"30","hashOfConfig":"18"},{"size":2574,"mtime":1611632562731,"results":"31","hashOfConfig":"18"},{"size":2483,"mtime":1611632924495,"results":"32","hashOfConfig":"18"},{"size":2547,"mtime":1611584637369,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1o4lee7",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"36"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"36"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"36"},"C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\HealthApplication\\healthapp\\src\\index.js",[],["71","72"],"C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\HealthApplication\\healthapp\\src\\reportWebVitals.js",[],"C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\HealthApplication\\healthapp\\src\\App.js",[],"C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\HealthApplication\\healthapp\\src\\components\\login.js",[],"C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\HealthApplication\\healthapp\\src\\components\\Homepage.js",[],"C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\HealthApplication\\healthapp\\src\\components\\Signup.js",["73"],"C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\HealthApplication\\healthapp\\src\\components\\EditAccount.js",[],"C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\HealthApplication\\healthapp\\src\\pagecomponent\\footer.js",[],"C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\HealthApplication\\healthapp\\src\\pagecomponent\\nav.js",[],"C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\HealthApplication\\healthapp\\src\\components\\Homepagecomponents\\Maingraph.js",["74","75"],"import axios from \"axios\";\r\nimport Highcharts, { destroyObjectProperties } from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport { useEffect, useState } from \"react\";\r\nimport config from \"../../config.json\"\r\n\r\nfunction Maingraph(props){\r\n  const [graphdatabodyfat, setgraphdatabodyfat] = useState([0,0,0,0,0,0,0,0,0,0,0,0])\r\n    const [graphdataweight, setgraphdataweight] = useState([\r\n      0,\r\n      0,\r\n      0,\r\n      0,\r\n      0,\r\n      0,\r\n      0,\r\n      0,\r\n      0,\r\n      0,\r\n      0,\r\n      0,\r\n    ]);\r\n\r\n  const options = {\r\n    colors: [\"#058DC7\", \"#50B432\"],\r\n    chart: {\r\n      backgroundColor:\r\n        Highcharts.defaultOptions.legend.backgroundColor || // theme\r\n        \"#3E4551\",\r\n      color: \"#FFFFFF\",\r\n    },\r\n    title: {\r\n      text: \"Body Weight and Fat Percentage\",\r\n      style: {\r\n        color: \"#FFFFFF\",\r\n      },\r\n    },\r\n    subtitle: {\r\n      text: \"\",\r\n    },\r\n    xAxis: [\r\n      {\r\n        categories: [\r\n          \"Jan\",\r\n          \"Feb\",\r\n          \"Mar\",\r\n          \"Apr\",\r\n          \"May\",\r\n          \"Jun\",\r\n          \"Jul\",\r\n          \"Aug\",\r\n          \"Sep\",\r\n          \"Oct\",\r\n          \"Nov\",\r\n          \"Dec\",\r\n        ],\r\n        crosshair: true,\r\n        labels: {\r\n          style: {\r\n            color: \"#FFFFFF\",\r\n          },\r\n        },\r\n      },\r\n    ],\r\n    yAxis: [\r\n      {\r\n        // Primary yAxis\r\n        labels: {\r\n          format: \"{value}Kg\",\r\n          style: {\r\n            color: \"#50C878\",\r\n          },\r\n        },\r\n        title: {\r\n          text: \"Body Weight\",\r\n          style: {\r\n            color: \"#50C878\",\r\n          },\r\n        },\r\n      },\r\n      {\r\n        // Secondary yAxis\r\n        title: {\r\n          text: \"Body Fat Percentage\",\r\n          style: {\r\n            color: Highcharts.getOptions().colors[0],\r\n          },\r\n        },\r\n        labels: {\r\n          format: \"{value} %\",\r\n          style: {\r\n            color: Highcharts.getOptions().colors[0],\r\n          },\r\n        },\r\n        opposite: true,\r\n      },\r\n    ],\r\n    tooltip: {\r\n      shared: true,\r\n    },\r\n    legend: {\r\n      layout: \"vertical\",\r\n      align: \"left\",\r\n      x: 120,\r\n      verticalAlign: \"top\",\r\n      y: 100,\r\n      floating: true,\r\n      backgroundColor:\r\n        Highcharts.defaultOptions.legend.backgroundColor || // theme\r\n        \"rgba(255,255,255,0.25)\",\r\n    },\r\n    series: [\r\n      {\r\n        name: \"Body Fat\",\r\n        type: \"column\",\r\n        yAxis: 1,\r\n        data:graphdatabodyfat,\r\n        tooltip: {\r\n          valueSuffix: \" %\",\r\n        },\r\n      },\r\n      {\r\n        name: \"Body Weight\",\r\n        type: \"spline\",\r\n        data: graphdataweight,\r\n        tooltip: {\r\n          valueSuffix: \"Kg\",\r\n        },\r\n      },\r\n    ],\r\n  };\r\n\r\n  async function getgraphdata(){\r\n    await axios.get(\r\n      config.apiserver+\"updates/gethealthdetailscurrentyear/\"+props.curremail\r\n    ).then(data=>{\r\n      var listofbodyfat=[]\r\n      var listofweight=[]\r\n      for (var x of data.data){\r\n        listofbodyfat.push(x[\"bodyfat\"]);\r\n        listofweight.push(x[\"weight\"]);\r\n      }\r\n        setgraphdatabodyfat(listofbodyfat);\r\n        setgraphdataweight(listofweight);\r\n    });\r\n  }\r\n\r\n  useEffect(()=>{\r\n    getgraphdata();\r\n  },[]);\r\n\r\n    return (\r\n      <div>\r\n        <HighchartsReact\r\n          highcharts={Highcharts}\r\n          options={options}\r\n        />\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Maingraph;","C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\HealthApplication\\healthapp\\src\\components\\Homepagecomponents\\goalcard.js",["76"],"C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\HealthApplication\\healthapp\\src\\components\\Homepagecomponents\\Currenthealthcard.js",["77"],"C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\HealthApplication\\healthapp\\src\\components\\HealthUpdates\\posthealthupdates.js",[],"C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\HealthApplication\\healthapp\\src\\components\\Updates.js",["78","79"],"import { useEffect, useState } from 'react'\r\nimport {MDBCard,MDBDataTable} from 'mdbreact'\r\nimport PostHealthUdpates from './HealthUpdates/posthealthupdates';\r\nimport axios from 'axios';\r\nimport config from '../config.json'\r\n\r\nfunction Updates(props){\r\n  const [isLoading, setisLoading] = useState(true);\r\n  const [updatedata, setupdatedata] = useState([]);\r\n  \r\n  const data = {\r\n    columns: [\r\n      {\r\n        label: \"Id\",\r\n        field: \"number\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Height\",\r\n        field: \"height\",\r\n        sort: \"asc\",\r\n        width: 270,\r\n      },\r\n      {\r\n        label: \"Weight\",\r\n        field: \"weight\",\r\n        sort: \"asc\",\r\n        width: 270,\r\n      },\r\n      {\r\n        label: \"BodyFat\",\r\n        field: \"bodyfat\",\r\n        sort: \"asc\",\r\n        width: 270,\r\n      },\r\n      {\r\n        label: \"BMI\",\r\n        field: \"BMI\",\r\n        sort: \"asc\",\r\n        width: 270,\r\n      },\r\n      {\r\n        label: \"Status\",\r\n        field: \"status\",\r\n        sort: \"asc\",\r\n        width: 270,\r\n      },\r\n    ],\r\n    rows: updatedata,\r\n  };\r\n\r\n  function getdata(){\r\n    axios\r\n      .get(\r\n        config.apiserver+\"updates/getcurrenthealthstatus/\" +\r\n          props.curremail\r\n      )\r\n      .then((data) => {\r\n        var i = 1;\r\n        for (var x of data.data) {\r\n          x[\"number\"] = i;\r\n          i++;\r\n          x[\"BMI\"] = \"test\";\r\n          x[\"status\"] = \"test\";\r\n        }\r\n        setupdatedata(data.data);\r\n        data.rows = updatedata;\r\n        setisLoading(false);\r\n      });\r\n  }\r\n\r\n  useEffect(() => {\r\n    getdata()\r\n  },[]);\r\n\r\n  if (isLoading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <MDBCard\r\n        style={{\r\n          paddingTop: \"40px\",\r\n          AlignItems: \"center\",\r\n          backgroundColor: \"#4B515D\",\r\n          color: \"white\",\r\n        }}\r\n      >\r\n        <h2>HealthUpdates</h2>\r\n        <PostHealthUdpates\r\n          style={{ float: \"right\" }}\r\n          curremail={props.curremail}\r\n          setisLoading={setisLoading}\r\n          getdata={getdata}\r\n        ></PostHealthUdpates>\r\n      </MDBCard>\r\n      <MDBCard style={{ backgroundColor: \"#4B515D\" }}>\r\n        <MDBDataTable\r\n          dark\r\n          theadColor=\"darkgrey\"\r\n          theadTextWhite\r\n          striped\r\n          bordered\r\n          small\r\n          fixed\r\n          hover\r\n          tbodyTextWhite\r\n          entries={8}\r\n          entriesOptions={[1, 5, 8]}\r\n          data={data}\r\n        />\r\n      </MDBCard>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Updates;","C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\HealthApplication\\healthapp\\src\\components\\Goals.js",["80"],"import {useState,useEffect} from 'react'\r\nimport {MDBCard,MDBDataTable} from 'mdbreact';\r\nimport SetGoal from './Goals/Setgoal';\r\nimport axios from 'axios';\r\nimport config from '../config.json'\r\n\r\nfunction Goals(props){\r\n     const [isLoading, setisLoading] = useState(true);\r\n     const [updatedata, setupdatedata] = useState([]);\r\n\r\n     const data = {\r\n       columns: [\r\n         {\r\n           label: \"Id\",\r\n           field: \"number\",\r\n           sort: \"asc\",\r\n           width: 150,\r\n         },\r\n         {\r\n           label: \"Weight (kg)\",\r\n           field: \"weight\",\r\n           sort: \"asc\",\r\n           width: 270,\r\n         },\r\n        {\r\n           label: \"BodyFat (%)\",\r\n           field: \"bodyfat\",\r\n           sort: \"asc\",\r\n           width: 270,\r\n         },\r\n         {\r\n           label: \"BMI\",\r\n           field: \"BMI\",\r\n           sort: \"asc\",\r\n           width: 270,\r\n         },\r\n       ],\r\n       rows: updatedata,\r\n     };\r\n\r\n     function getdata() {\r\n       axios\r\n         .get(\r\n           config.apiserver+\"goal/getgoals/\" +\r\n             props.curremail\r\n         )\r\n         .then((data) => {\r\n           var i = 1;\r\n           for (var x of data.data) {\r\n             x[\"number\"] = i;\r\n             i++;\r\n           }\r\n           setupdatedata(data.data);\r\n           data.rows = updatedata;\r\n           setisLoading(false);\r\n         });\r\n     }\r\n\r\n     useEffect(() => {\r\n       getdata();\r\n     }, []);\r\n\r\n     if (isLoading) {\r\n       return <div>Loading...</div>;\r\n     }\r\n\r\n     return (\r\n       <div>\r\n         <MDBCard\r\n           style={{\r\n             paddingTop: \"40px\",\r\n             AlignItems: \"center\",\r\n             backgroundColor: \"#4B515D\",\r\n             color: \"white\",\r\n           }}\r\n         >\r\n           <h2>Goals</h2>\r\n           <SetGoal\r\n             style={{ float: \"right\" }}\r\n             curremail={props.curremail}\r\n             setisLoading={setisLoading}\r\n             getdata={getdata}\r\n           ></SetGoal>\r\n         </MDBCard>\r\n         <MDBCard style={{ backgroundColor: \"#4B515D\" }}>\r\n           <MDBDataTable\r\n             dark\r\n             theadColor=\"darkgrey\"\r\n             theadTextWhite\r\n             striped\r\n             bordered\r\n             small\r\n             fixed\r\n             hover\r\n             tbodyTextWhite\r\n             entries={8}\r\n             entriesOptions={[1, 5, 8]}\r\n             data={data}\r\n           />\r\n         </MDBCard>\r\n       </div>\r\n     );\r\n}\r\n\r\nexport default Goals;","C:\\Users\\User\\Documents\\UNVERSITY SUBJECTS\\POST GRAD\\SYSTEM ANALYSIS\\HealthApplication\\healthapp\\src\\components\\Goals\\Setgoal.js",["81"],"import { useEffect, useState } from \"react\";\r\nimport {\r\n  MDBBtn,\r\n  MDBContainer,\r\n  MDBModal,\r\n  MDBModalBody,\r\n  MDBModalFooter,\r\n  MDBModalHeader,\r\n} from \"mdbreact\";\r\nimport axios from \"axios\";\r\n\r\nfunction SetGoal(props){\r\n    \r\n    const [modal, setModal] = useState(false);\r\n    const [weight, setWeight] = useState();\r\n    const [bodyfat, setbodyfat] = useState();\r\n\r\n    useEffect(() => {\r\n      window.addEventListener(\"toggle\", toggle);\r\n      window.addEventListener(\"submit\", submit);\r\n      window.addEventListener(\"weight\", handleweight);\r\n      window.addEventListener(\"bodyfat\", handlebodyfat);\r\n    });\r\n\r\n    function toggle() {\r\n      setModal(!modal);\r\n    }\r\n\r\n    function handleweight(event) {\r\n      setWeight(event.target.value);\r\n    }\r\n\r\n    function handlebodyfat(event) {\r\n      setbodyfat(event.target.value);\r\n    }\r\n    async function submit() {\r\n      toggle();\r\n      const payload={weight:weight,bodyfat:bodyfat,email:props.curremail}\r\n      await axios.post(\"http://localhost:3000/goal/newgoal\",payload).then((response)=>{\r\n        if (props.setisLoading != null & props.setisLoading != null) {\r\n              props.getdata();\r\n              props.setisLoading(false);\r\n            }\r\n\r\n          if(props.getgoaldata!=null){\r\n            props.getgoaldata();\r\n          }\r\n        })\r\n    }\r\n    return (\r\n      <div>\r\n        <MDBContainer>\r\n          <MDBBtn onClick={toggle} style={{ width: \"300px\" }}>\r\n            Set Goal >\r\n          </MDBBtn>\r\n          <MDBModal isOpen={modal} toggle={toggle}>\r\n            <MDBModalHeader toggle={toggle} style={{ color: \"black\" }}>\r\n              Set Goal\r\n            </MDBModalHeader>\r\n            <MDBModalBody>\r\n              <form style={{ color: \"black\" }}>\r\n                <label>Weight(kg):</label>\r\n                <input type=\"text\" className=\"form-control\" onChange={handleweight}></input>\r\n                <br />\r\n                <br />\r\n                <label>bodyfat:</label>\r\n                <input type=\"text\" className=\"form-control\" onChange={handlebodyfat}></input>\r\n                <br />\r\n                <br />\r\n              </form>\r\n            </MDBModalBody>\r\n            <MDBModalFooter>\r\n              <MDBBtn color=\"danger\" onClick={toggle}>\r\n                Close\r\n              </MDBBtn>\r\n              <MDBBtn color=\"success\" onClick={submit}>\r\n                Save changes\r\n              </MDBBtn>\r\n            </MDBModalFooter>\r\n          </MDBModal>\r\n        </MDBContainer>\r\n      </div>\r\n    );\r\n\r\n}\r\n\r\nexport default SetGoal;",{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","severity":1,"message":"87","line":124,"column":19,"nodeType":"88","endLine":124,"endColumn":32},{"ruleId":"89","severity":1,"message":"90","line":2,"column":22,"nodeType":"91","messageId":"92","endLine":2,"endColumn":45},{"ruleId":"93","severity":1,"message":"94","line":150,"column":5,"nodeType":"95","endLine":150,"endColumn":7,"suggestions":"96"},{"ruleId":"93","severity":1,"message":"97","line":42,"column":5,"nodeType":"95","endLine":42,"endColumn":7,"suggestions":"98"},{"ruleId":"93","severity":1,"message":"99","line":28,"column":5,"nodeType":"95","endLine":28,"endColumn":7,"suggestions":"100"},{"ruleId":"89","severity":1,"message":"101","line":1,"column":8,"nodeType":"91","messageId":"92","endLine":1,"endColumn":13},{"ruleId":"93","severity":1,"message":"102","line":75,"column":5,"nodeType":"95","endLine":75,"endColumn":7,"suggestions":"103"},{"ruleId":"93","severity":1,"message":"102","line":62,"column":9,"nodeType":"95","endLine":62,"endColumn":11,"suggestions":"104"},{"ruleId":"89","severity":1,"message":"101","line":1,"column":8,"nodeType":"91","messageId":"92","endLine":1,"endColumn":13},"no-native-reassign",["105"],"no-negated-in-lhs",["106"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-unused-vars","'destroyObjectProperties' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getgraphdata'. Either include it or remove the dependency array.","ArrayExpression",["107"],"React Hook useEffect has a missing dependency: 'getgoaldata'. Either include it or remove the dependency array.",["108"],"React Hook useEffect has a missing dependency: 'gethealthdata'. Either include it or remove the dependency array.",["109"],"'react' is defined but never used.","React Hook useEffect has a missing dependency: 'getdata'. Either include it or remove the dependency array.",["110"],["111"],"no-global-assign","no-unsafe-negation",{"desc":"112","fix":"113"},{"desc":"114","fix":"115"},{"desc":"116","fix":"117"},{"desc":"118","fix":"119"},{"desc":"118","fix":"120"},"Update the dependencies array to be: [getgraphdata]",{"range":"121","text":"122"},"Update the dependencies array to be: [getgoaldata]",{"range":"123","text":"124"},"Update the dependencies array to be: [gethealthdata]",{"range":"125","text":"126"},"Update the dependencies array to be: [getdata]",{"range":"127","text":"128"},{"range":"129","text":"128"},[3247,3249],"[getgraphdata]",[1145,1147],"[getgoaldata]",[719,721],"[gethealthdata]",[1619,1621],"[getdata]",[1473,1475]]