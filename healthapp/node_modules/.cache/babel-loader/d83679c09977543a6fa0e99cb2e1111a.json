{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\UNVERSITY SUBJECTS\\\\POST GRAD\\\\SYSTEM ANALYSIS\\\\HealthApplication\\\\healthapp\\\\src\\\\components\\\\Homepagecomponents\\\\Maingraph.js\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport Highcharts, { destroyObjectProperties } from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport { useEffect, useState } from \"react\";\n\nfunction Maingraph(props) {\n  _s();\n\n  const [graphdatabodyfat, setgraphdatabodyfat] = useState([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\n  const [graphdataweight, setgraphdataweight] = useState([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\n  const options = {\n    colors: [\"#058DC7\", \"#50B432\"],\n    chart: {\n      backgroundColor: Highcharts.defaultOptions.legend.backgroundColor || // theme\n      \"#3E4551\",\n      color: \"#FFFFFF\"\n    },\n    title: {\n      text: \"Body Weight and Fat Percentage\",\n      style: {\n        color: \"#FFFFFF\"\n      }\n    },\n    subtitle: {\n      text: \"\"\n    },\n    xAxis: [{\n      categories: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\n      crosshair: true,\n      labels: {\n        style: {\n          color: \"#FFFFFF\"\n        }\n      }\n    }],\n    yAxis: [{\n      // Primary yAxis\n      labels: {\n        format: \"{value}Kg\",\n        style: {\n          color: \"#50C878\"\n        }\n      },\n      title: {\n        text: \"Body Weight\",\n        style: {\n          color: \"#50C878\"\n        }\n      }\n    }, {\n      // Secondary yAxis\n      title: {\n        text: \"Body Fat Percentage\",\n        style: {\n          color: Highcharts.getOptions().colors[0]\n        }\n      },\n      labels: {\n        format: \"{value} %\",\n        style: {\n          color: Highcharts.getOptions().colors[0]\n        }\n      },\n      opposite: true\n    }],\n    tooltip: {\n      shared: true\n    },\n    legend: {\n      layout: \"vertical\",\n      align: \"left\",\n      x: 120,\n      verticalAlign: \"top\",\n      y: 100,\n      floating: true,\n      backgroundColor: Highcharts.defaultOptions.legend.backgroundColor || // theme\n      \"rgba(255,255,255,0.25)\"\n    },\n    series: [{\n      name: \"Body Fat\",\n      type: \"column\",\n      yAxis: 1,\n      data: graphdatabodyfat,\n      tooltip: {\n        valueSuffix: \" %\"\n      }\n    }, {\n      name: \"Body Weight\",\n      type: \"spline\",\n      data: graphdataweight,\n      tooltip: {\n        valueSuffix: \"Kg\"\n      }\n    }]\n  };\n\n  async function getgraphdata() {\n    await axios.get(\"http://localhost:3000/updates/gethealthdetailscurrentyear/\" + props.curremail).then(data => {\n      var listofbodyfat = [];\n      var listofweight = [];\n\n      for (var x of data.data) {\n        listofbodyfat.push(x[\"bodyfat\"]);\n        listofweight.push(x[\"weight\"]);\n      }\n\n      const test = [12, 12, 12, 34, 32];\n      setgraphdatabodyfat(test);\n      setgraphdataweight(listofweight);\n      console.log(weight);\n    });\n  }\n\n  useEffect(() => {\n    getgraphdata();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(HighchartsReact, {\n      highcharts: Highcharts,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Maingraph, \"im5Ow6f6Mt6NFEglw7L1zFytaq0=\");\n\n_c = Maingraph;\nexport default Maingraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"Maingraph\");","map":{"version":3,"sources":["C:/Users/User/Documents/UNVERSITY SUBJECTS/POST GRAD/SYSTEM ANALYSIS/HealthApplication/healthapp/src/components/Homepagecomponents/Maingraph.js"],"names":["axios","Highcharts","destroyObjectProperties","HighchartsReact","useEffect","useState","Maingraph","props","graphdatabodyfat","setgraphdatabodyfat","graphdataweight","setgraphdataweight","options","colors","chart","backgroundColor","defaultOptions","legend","color","title","text","style","subtitle","xAxis","categories","crosshair","labels","yAxis","format","getOptions","opposite","tooltip","shared","layout","align","x","verticalAlign","y","floating","series","name","type","data","valueSuffix","getgraphdata","get","curremail","then","listofbodyfat","listofweight","push","test","console","log","weight"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport Highcharts, { destroyObjectProperties } from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\n\r\n\r\nfunction Maingraph(props){\r\n\r\n  const [graphdatabodyfat, setgraphdatabodyfat] = useState([0,0,0,0,0,0,0,0,0,0,0,0])\r\n    const [graphdataweight, setgraphdataweight] = useState([\r\n      0,\r\n      0,\r\n      0,\r\n      0,\r\n      0,\r\n      0,\r\n      0,\r\n      0,\r\n      0,\r\n      0,\r\n      0,\r\n      0,\r\n    ]);\r\n\r\n  const options = {\r\n    colors: [\"#058DC7\", \"#50B432\"],\r\n    chart: {\r\n      backgroundColor:\r\n        Highcharts.defaultOptions.legend.backgroundColor || // theme\r\n        \"#3E4551\",\r\n      color: \"#FFFFFF\",\r\n    },\r\n    title: {\r\n      text: \"Body Weight and Fat Percentage\",\r\n      style: {\r\n        color: \"#FFFFFF\",\r\n      },\r\n    },\r\n    subtitle: {\r\n      text: \"\",\r\n    },\r\n    xAxis: [\r\n      {\r\n        categories: [\r\n          \"Jan\",\r\n          \"Feb\",\r\n          \"Mar\",\r\n          \"Apr\",\r\n          \"May\",\r\n          \"Jun\",\r\n          \"Jul\",\r\n          \"Aug\",\r\n          \"Sep\",\r\n          \"Oct\",\r\n          \"Nov\",\r\n          \"Dec\",\r\n        ],\r\n        crosshair: true,\r\n        labels: {\r\n          style: {\r\n            color: \"#FFFFFF\",\r\n          },\r\n        },\r\n      },\r\n    ],\r\n    yAxis: [\r\n      {\r\n        // Primary yAxis\r\n        labels: {\r\n          format: \"{value}Kg\",\r\n          style: {\r\n            color: \"#50C878\",\r\n          },\r\n        },\r\n        title: {\r\n          text: \"Body Weight\",\r\n          style: {\r\n            color: \"#50C878\",\r\n          },\r\n        },\r\n      },\r\n      {\r\n        // Secondary yAxis\r\n        title: {\r\n          text: \"Body Fat Percentage\",\r\n          style: {\r\n            color: Highcharts.getOptions().colors[0],\r\n          },\r\n        },\r\n        labels: {\r\n          format: \"{value} %\",\r\n          style: {\r\n            color: Highcharts.getOptions().colors[0],\r\n          },\r\n        },\r\n        opposite: true,\r\n      },\r\n    ],\r\n    tooltip: {\r\n      shared: true,\r\n    },\r\n    legend: {\r\n      layout: \"vertical\",\r\n      align: \"left\",\r\n      x: 120,\r\n      verticalAlign: \"top\",\r\n      y: 100,\r\n      floating: true,\r\n      backgroundColor:\r\n        Highcharts.defaultOptions.legend.backgroundColor || // theme\r\n        \"rgba(255,255,255,0.25)\",\r\n    },\r\n    series: [\r\n      {\r\n        name: \"Body Fat\",\r\n        type: \"column\",\r\n        yAxis: 1,\r\n        data:graphdatabodyfat,\r\n        tooltip: {\r\n          valueSuffix: \" %\",\r\n        },\r\n      },\r\n      {\r\n        name: \"Body Weight\",\r\n        type: \"spline\",\r\n        data: graphdataweight,\r\n        tooltip: {\r\n          valueSuffix: \"Kg\",\r\n        },\r\n      },\r\n    ],\r\n  };\r\n\r\n  async function getgraphdata(){\r\n    await axios.get(\r\n      \"http://localhost:3000/updates/gethealthdetailscurrentyear/\"+props.curremail\r\n    ).then(data=>{\r\n      var listofbodyfat=[]\r\n      var listofweight=[]\r\n      for (var x of data.data){\r\n        listofbodyfat.push(x[\"bodyfat\"]);\r\n        listofweight.push(x[\"weight\"]);\r\n      }\r\n      const test= [12,12,12,34,32]\r\n        setgraphdatabodyfat(test);\r\n        setgraphdataweight(listofweight);\r\n        console.log(weight);\r\n    });\r\n  }\r\n\r\n  useEffect(()=>{\r\n    getgraphdata();\r\n  },[]);\r\n\r\n    return (\r\n      <div>\r\n        <HighchartsReact\r\n          highcharts={Highcharts}\r\n          options={options}\r\n        />\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Maingraph;"]},"metadata":{},"sourceType":"module"}